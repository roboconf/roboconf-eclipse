/**
 * Copyright 2016 Linagora, Université Joseph Fourier, Floralis
 * 
 * The present code is developed in the scope of the joint LINAGORA -
 * Université Joseph Fourier - Floralis research program and is designated
 * as a "Result" pursuant to the terms and conditions of the LINAGORA
 * - Université Joseph Fourier - Floralis research program. Each copyright
 * holder of Results enumerated here above fully & independently holds complete
 * ownership of the complete Intellectual Property rights applicable to the whole
 * of said Results, and may freely exploit it in any manner which does not infringe
 * the moral rights of the other copyright holders.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 *  
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.roboconf.eclipse.occi.graph.roboconfgraph.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.roboconf.eclipse.occi.graph.roboconfgraph.util.RoboconfgraphAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class RoboconfgraphItemProviderAdapterFactory extends RoboconfgraphAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RoboconfgraphItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.roboconf.eclipse.occi.graph.roboconfgraph.RoboconfComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoboconfComponentItemProvider roboconfComponentItemProvider;

	/**
	 * This creates an adapter for a {@link net.roboconf.eclipse.occi.graph.roboconfgraph.RoboconfComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoboconfComponentAdapter() {
		if (roboconfComponentItemProvider == null) {
			roboconfComponentItemProvider = new RoboconfComponentItemProvider(this);
		}

		return roboconfComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.roboconf.eclipse.occi.graph.roboconfgraph.RoboconfFacet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoboconfFacetItemProvider roboconfFacetItemProvider;

	/**
	 * This creates an adapter for a {@link net.roboconf.eclipse.occi.graph.roboconfgraph.RoboconfFacet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoboconfFacetAdapter() {
		if (roboconfFacetItemProvider == null) {
			roboconfFacetItemProvider = new RoboconfFacetItemProvider(this);
		}

		return roboconfFacetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.roboconf.eclipse.occi.graph.roboconfgraph.RoboconfExportedVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoboconfExportedVariableItemProvider roboconfExportedVariableItemProvider;

	/**
	 * This creates an adapter for a {@link net.roboconf.eclipse.occi.graph.roboconfgraph.RoboconfExportedVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoboconfExportedVariableAdapter() {
		if (roboconfExportedVariableItemProvider == null) {
			roboconfExportedVariableItemProvider = new RoboconfExportedVariableItemProvider(this);
		}

		return roboconfExportedVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.roboconf.eclipse.occi.graph.roboconfgraph.RoboconfImportedVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoboconfImportedVariableItemProvider roboconfImportedVariableItemProvider;

	/**
	 * This creates an adapter for a {@link net.roboconf.eclipse.occi.graph.roboconfgraph.RoboconfImportedVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoboconfImportedVariableAdapter() {
		if (roboconfImportedVariableItemProvider == null) {
			roboconfImportedVariableItemProvider = new RoboconfImportedVariableItemProvider(this);
		}

		return roboconfImportedVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.roboconf.eclipse.occi.graph.roboconfgraph.RoboconfOwnerLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoboconfOwnerLinkItemProvider roboconfOwnerLinkItemProvider;

	/**
	 * This creates an adapter for a {@link net.roboconf.eclipse.occi.graph.roboconfgraph.RoboconfOwnerLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoboconfOwnerLinkAdapter() {
		if (roboconfOwnerLinkItemProvider == null) {
			roboconfOwnerLinkItemProvider = new RoboconfOwnerLinkItemProvider(this);
		}

		return roboconfOwnerLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.roboconf.eclipse.occi.graph.roboconfgraph.RoboconfInheritanceLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoboconfInheritanceLinkItemProvider roboconfInheritanceLinkItemProvider;

	/**
	 * This creates an adapter for a {@link net.roboconf.eclipse.occi.graph.roboconfgraph.RoboconfInheritanceLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoboconfInheritanceLinkAdapter() {
		if (roboconfInheritanceLinkItemProvider == null) {
			roboconfInheritanceLinkItemProvider = new RoboconfInheritanceLinkItemProvider(this);
		}

		return roboconfInheritanceLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.roboconf.eclipse.occi.graph.roboconfgraph.RoboconfChildrenLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoboconfChildrenLinkItemProvider roboconfChildrenLinkItemProvider;

	/**
	 * This creates an adapter for a {@link net.roboconf.eclipse.occi.graph.roboconfgraph.RoboconfChildrenLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoboconfChildrenLinkAdapter() {
		if (roboconfChildrenLinkItemProvider == null) {
			roboconfChildrenLinkItemProvider = new RoboconfChildrenLinkItemProvider(this);
		}

		return roboconfChildrenLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.roboconf.eclipse.occi.graph.roboconfgraph.RoboconfRuntimeLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoboconfRuntimeLinkItemProvider roboconfRuntimeLinkItemProvider;

	/**
	 * This creates an adapter for a {@link net.roboconf.eclipse.occi.graph.roboconfgraph.RoboconfRuntimeLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoboconfRuntimeLinkAdapter() {
		if (roboconfRuntimeLinkItemProvider == null) {
			roboconfRuntimeLinkItemProvider = new RoboconfRuntimeLinkItemProvider(this);
		}

		return roboconfRuntimeLinkItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (roboconfComponentItemProvider != null) roboconfComponentItemProvider.dispose();
		if (roboconfFacetItemProvider != null) roboconfFacetItemProvider.dispose();
		if (roboconfExportedVariableItemProvider != null) roboconfExportedVariableItemProvider.dispose();
		if (roboconfImportedVariableItemProvider != null) roboconfImportedVariableItemProvider.dispose();
		if (roboconfOwnerLinkItemProvider != null) roboconfOwnerLinkItemProvider.dispose();
		if (roboconfInheritanceLinkItemProvider != null) roboconfInheritanceLinkItemProvider.dispose();
		if (roboconfChildrenLinkItemProvider != null) roboconfChildrenLinkItemProvider.dispose();
		if (roboconfRuntimeLinkItemProvider != null) roboconfRuntimeLinkItemProvider.dispose();
	}

}
